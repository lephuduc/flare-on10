from Crypto.PublicKey import RSA
from base64 import b64decode
from Crypto.Util.number import long_to_bytes,bytes_to_long
key64 = b"""MIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKCAQEAycMwco9oCHr8YKEz5Jud
PeSfD/mZXF4S5cZcEYl7xxjj5NJy1aWM5GN1WyxjRn8NCfk8Mctn/jGICa9/yLLI
xyGrVHzk22Pb3/9dmwbIV5n97mkPkMR5xtC546P2blXWMCnOWgLvhMaq3F4iQWgw
JMxl11ZCr+C6vnbymmd86xWb5IuzJl69K9UZoq9+A2zC5kAcN1VXYagcPR0opFbD
i5G1WQNb/wE92gQ5BTuelvSyePcZ6Tnmd9BYvG6YAFr/IwgUpJerNLf6kCtmbRgN
6E4k6Q91PXnbC3IXrLXEb00apWvuVz8tR6Qzfd0eK5Z+3HA4/usJDex0ktlNlom7
YQIBAw=="""

keyDER = b64decode(key64)
keyPub = RSA.importKey(keyDER)
# print()
N = keyPub.n
### TEST TING
# print(N)
rand_bytes = b'\xdf\xf6`\xfejxN \xd8z!\xa2\xe2\xc5Q\x99h\xb95_\xe3q\xea\xcc^\x9d\xb2*\xb6\xaah\x16\x1f\x0e\xfa\x08\xf8\x9a\xaf\xc1\x04v\xbe\x16\xe0\xecN\xce'
buf = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8b\x11("\x18H3*t\xbf\xae\xc7\x83\xc0\xc0\x03\xdb\xcd\xc8]M\x06\xbf\x95\xdf\xf6`\xfejxN \xd8z!\xa2\xe2\xc5Q\x99h\xb95_\xe3q\xea\xcc^\x9d\xb2*\xb6\xaah\x16\x1f\x0e\xfa\x08\xf8\x9a\xaf\xc1\x04v\xbe\x16\xe0\xecN\xceexpand 32-byte k'
e = 3
c = pow(bytes_to_long(buf),e,N)

## DO IT
with open('very_important_file.d3crypt_m3','rb') as f:
    C = f.read()
print('C:',bytes_to_long(C[-256:]))

# with open('test.3ncrypt_m3','wb') as f:
#     f.write(C[:-256])
msg = b'\x00'*240 + b'expand 32-byte k'
# print(msg)
msg = bytes_to_long(msg)
print(msg)

## sage

# from Crypto.Util.number import long_to_bytes,bytes_to_long

# n = 25470150703730072315086034936055649836295236884601534304156993296936285040601301375939610442634162257314189499275100972455566398455602026574433195970815202585090501432569441133857842325042217925159448570072586058996240505604332536419689764920477213974406475165093073579216369638057129512420088827606714396031123135244463251843168817519429473193827165432916372277360150211932008151288302906204095482949720169306181114320172114379252171541724857670073249548632622866650173757036971232388781059615489960396402755953330835572369467647829965472365925514887194394952977362957692659807638830075891677256168792219800752995169
# msg = 134877382546472451071872875728390660203
# c = 2425592482954093142911053394287864523808964564181573160646727426912420816161421295499810615636292488448086115375476578572126347389008149317940146698511301628342882097728861790163917385171608505786502099378180432350549613073164000743046053171252337966368352372410009389267473352698726296264255749133362831429534971651466910078754923485995987572417696906602747262956933918749969313809832939636800411857199483428558375468904127868025514462771636245588377871475012975670951402940280762132382274242486303138563790236596067661371781157135962527788369561955804123957047366621254000506424769282365883497834294487244664347316
# P.<x> = PolynomialRing(Zmod(n))
# f = (msg + ((2^8)^16)*x)^3 - c
# f = f.monic()
# m = f.small_roots(epsilon=1/20)
# long_to_bytes(int(m[0]))
# b'\x06\xf7v\x8f\xf2\xb9c\xf3V\xfc%\xb3D?{r\x9fh\xbc\xbd\xd6_"\xdeh\\<\xb5\xc8\xa2ir$6\x850\xe2d\xfd8\x8d\xc9b\xf5\xd77\xcb\x87>$\xf3\x97\t\xd2\x94"JRh\xc3Q-\xdbk>TA\x9bA\xc8\x10\xcf'

m = b'\x00'*168 + b'\x06\xf7v\x8f\xf2\xb9c\xf3V\xfc%\xb3D?{r\x9fh\xbc\xbd\xd6_"\xdeh\\<\xb5\xc8\xa2ir$6\x850\xe2d\xfd8\x8d\xc9b\xf5\xd77\xcb\x87>$\xf3\x97\t\xd2\x94"JRh\xc3Q-\xdbk>TA\x9bA\xc8\x10\xcf' + b'expand 32-byte k'
assert len(m)==256
# print(m)
print(m[192:192+48])