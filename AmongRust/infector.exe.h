/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'infector.exe'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _GUID;
union _LARGE_INTEGER;
struct _RTL_SRWLOCK;
struct _s_ThrowInfo;
struct _EXCEPTION_RECORD;

/* 1 */
struct RUNTIME_FUNCTION
{
  void *__ptr32 FunctionStart;
  void *__ptr32 FunctionEnd;
  void *__ptr32 UnwindInfo;
};

/* 2 */
struct UNWIND_INFO_HDR
{
  char Ver3_Flags;
  char PrologSize;
  char CntUnwindCodes;
  char FrReg_FrRegOff;
};

/* 3 */
struct UNWIND_CODE
{
  char PrologOff;
  char OpCode_OpInfo;
};

/* 4 */
struct FuncInfo
{
  int magicNumber;
  int maxState;
  void *__ptr32 pUnwindMap;
  int nTryBlocks;
  void *__ptr32 pTryBlockMap;
  int nIPMapEntries;
  void *__ptr32 pIPtoStateMap;
  int dispUnwindHelp;
  void *__ptr32 pESTypeList;
  int EHFlags;
};

/* 5 */
struct UnwindMapEntry
{
  int toState;
  void *__ptr32 action;
};

/* 6 */
struct TryBlockMapEntry
{
  int tryLow;
  int tryHigh;
  int catchHigh;
  int nCatches;
  void *__ptr32 pHandlerArray;
};

/* 7 */
struct HandlerType
{
  int adjectives;
  void *__ptr32 pType;
  int dispCatchObj;
  void *__ptr32 addressOfHandler;
  int dispFrame;
};

/* 8 */
struct IPtoStateMap
{
  void *__ptr32 pc;
  int state;
};

/* 9 */
struct TypeDescriptor
{
  void *pVFTable;
  void *spare;
  char name[];
};

/* 11 */
typedef struct _GUID GUID;

/* 10 */
typedef GUID KNOWNFOLDERID;

/* 12 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 14 */
typedef unsigned int DWORD;

/* 16 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 15 */
typedef struct _FILETIME FILETIME;

/* 17 */
typedef char CHAR;

/* 13 */
struct _WIN32_FIND_DATAA
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD dwReserved0;
  DWORD dwReserved1;
  CHAR cFileName[260];
  CHAR cAlternateFileName[14];
};

/* 19 */
typedef void *PVOID;

/* 21 */
typedef unsigned __int64 ULONG_PTR;

/* 20 */
typedef ULONG_PTR SIZE_T;

/* 18 */
struct _MEMORY_BASIC_INFORMATION
{
  PVOID BaseAddress;
  PVOID AllocationBase;
  DWORD AllocationProtect;
  SIZE_T RegionSize;
  DWORD State;
  DWORD Protect;
  DWORD Type;
};

/* 25 */
typedef unsigned __int16 WORD;

/* 24 */
struct _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F::$AA04DEB0C6383F89F13D312A174572A9
{
  WORD wProcessorArchitecture;
  WORD wReserved;
};

/* 23 */
union _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F
{
  DWORD dwOemId;
  struct
  {
    WORD wProcessorArchitecture;
    WORD wReserved;
  };
};

/* 26 */
typedef void *LPVOID;

/* 27 */
typedef ULONG_PTR DWORD_PTR;

/* 22 */
struct _SYSTEM_INFO
{
  union
  {
    DWORD dwOemId;
    struct
    {
      WORD wProcessorArchitecture;
      WORD wReserved;
    };
  };
  DWORD dwPageSize;
  LPVOID lpMinimumApplicationAddress;
  LPVOID lpMaximumApplicationAddress;
  DWORD_PTR dwActiveProcessorMask;
  DWORD dwNumberOfProcessors;
  DWORD dwProcessorType;
  DWORD dwAllocationGranularity;
  WORD wProcessorLevel;
  WORD wProcessorRevision;
};

/* 28 */
typedef union _LARGE_INTEGER LARGE_INTEGER;

/* 31 */
typedef int LONG;

/* 30 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 32 */
typedef __int64 LONGLONG;

/* 29 */
union _LARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    LONG HighPart;
  };
  struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 33 */
typedef struct _RTL_SRWLOCK RTL_SRWLOCK;

/* 34 */
struct _RTL_SRWLOCK
{
  PVOID Ptr;
};

/* 37 */
struct _OVERLAPPED::$742A73540840F318F86F9CEE3D494648::$9BFE693EDA487769FDABADE5E43394F7
{
  DWORD Offset;
  DWORD OffsetHigh;
};

/* 36 */
union _OVERLAPPED::$742A73540840F318F86F9CEE3D494648
{
  struct
  {
    DWORD Offset;
    DWORD OffsetHigh;
  };
  PVOID Pointer;
};

/* 38 */
typedef void *HANDLE;

/* 35 */
struct _OVERLAPPED
{
  ULONG_PTR Internal;
  ULONG_PTR InternalHigh;
  union
  {
    struct
    {
      DWORD Offset;
      DWORD OffsetHigh;
    };
    PVOID Pointer;
  };
  HANDLE hEvent;
};

/* 39 */
struct _BY_HANDLE_FILE_INFORMATION
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD dwVolumeSerialNumber;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD nNumberOfLinks;
  DWORD nFileIndexHigh;
  DWORD nFileIndexLow;
};

/* 42 */
typedef unsigned __int16 wchar_t;

/* 41 */
typedef wchar_t WCHAR;

/* 40 */
struct _WIN32_FIND_DATAW
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD dwReserved0;
  DWORD dwReserved1;
  WCHAR cFileName[260];
  WCHAR cAlternateFileName[14];
};

/* 43 */
struct _PROCESS_INFORMATION
{
  HANDLE hProcess;
  HANDLE hThread;
  DWORD dwProcessId;
  DWORD dwThreadId;
};

/* 45 */
typedef const struct _s_ThrowInfo ThrowInfo;

/* 44 */
typedef ThrowInfo _ThrowInfo;

/* 47 */
typedef int PMFN;

/* 46 */
#pragma pack(push, 4)
struct _s_ThrowInfo
{
  unsigned int attributes;
  PMFN pmfnUnwind;
  int pForwardCompat;
  int pCatchableTypeArray;
};
#pragma pack(pop)

/* 49 */
typedef void (__cdecl *_PVFV)();

/* 48 */
#pragma pack(push, 8)
struct _onexit_table_t
{
  _PVFV *_first;
  _PVFV *_last;
  _PVFV *_end;
};
#pragma pack(pop)

/* 51 */
typedef unsigned __int64 DWORD64;

/* 56 */
typedef unsigned __int8 BYTE;

/* 59 */
typedef unsigned __int64 ULONGLONG;

/* 58 */
struct __declspec(align(16)) _M128A
{
  ULONGLONG Low;
  LONGLONG High;
};

/* 57 */
typedef struct _M128A M128A;

/* 55 */
struct __declspec(align(16)) _XSAVE_FORMAT
{
  WORD ControlWord;
  WORD StatusWord;
  BYTE TagWord;
  BYTE Reserved1;
  WORD ErrorOpcode;
  DWORD ErrorOffset;
  WORD ErrorSelector;
  WORD Reserved2;
  DWORD DataOffset;
  WORD DataSelector;
  WORD Reserved3;
  DWORD MxCsr;
  DWORD MxCsr_Mask;
  M128A FloatRegisters[8];
  M128A XmmRegisters[16];
  BYTE Reserved4[96];
};

/* 54 */
typedef struct _XSAVE_FORMAT XSAVE_FORMAT;

/* 53 */
typedef XSAVE_FORMAT XMM_SAVE_AREA32;

/* 60 */
struct _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB::$897D11C01F73F7E79A06B0B9ED9B9414
{
  M128A Header[2];
  M128A Legacy[8];
  M128A Xmm0;
  M128A Xmm1;
  M128A Xmm2;
  M128A Xmm3;
  M128A Xmm4;
  M128A Xmm5;
  M128A Xmm6;
  M128A Xmm7;
  M128A Xmm8;
  M128A Xmm9;
  M128A Xmm10;
  M128A Xmm11;
  M128A Xmm12;
  M128A Xmm13;
  M128A Xmm14;
  M128A Xmm15;
};

/* 52 */
union _CONTEXT::$D2ECA93702C646ACAFACD524BE9E8FEB
{
  XMM_SAVE_AREA32 FltSave;
  struct
  {
    M128A Header[2];
    M128A Legacy[8];
    M128A Xmm0;
    M128A Xmm1;
    M128A Xmm2;
    M128A Xmm3;
    M128A Xmm4;
    M128A Xmm5;
    M128A Xmm6;
    M128A Xmm7;
    M128A Xmm8;
    M128A Xmm9;
    M128A Xmm10;
    M128A Xmm11;
    M128A Xmm12;
    M128A Xmm13;
    M128A Xmm14;
    M128A Xmm15;
  };
};

/* 50 */
struct __declspec(align(16)) _CONTEXT
{
  DWORD64 P1Home;
  DWORD64 P2Home;
  DWORD64 P3Home;
  DWORD64 P4Home;
  DWORD64 P5Home;
  DWORD64 P6Home;
  DWORD ContextFlags;
  DWORD MxCsr;
  WORD SegCs;
  WORD SegDs;
  WORD SegEs;
  WORD SegFs;
  WORD SegGs;
  WORD SegSs;
  DWORD EFlags;
  DWORD64 Dr0;
  DWORD64 Dr1;
  DWORD64 Dr2;
  DWORD64 Dr3;
  DWORD64 Dr6;
  DWORD64 Dr7;
  DWORD64 Rax;
  DWORD64 Rcx;
  DWORD64 Rdx;
  DWORD64 Rbx;
  DWORD64 Rsp;
  DWORD64 Rbp;
  DWORD64 Rsi;
  DWORD64 Rdi;
  DWORD64 R8;
  DWORD64 R9;
  DWORD64 R10;
  DWORD64 R11;
  DWORD64 R12;
  DWORD64 R13;
  DWORD64 R14;
  DWORD64 R15;
  DWORD64 Rip;
  union
  {
    XMM_SAVE_AREA32 FltSave;
    struct
    {
      M128A Header[2];
      M128A Legacy[8];
      M128A Xmm0;
      M128A Xmm1;
      M128A Xmm2;
      M128A Xmm3;
      M128A Xmm4;
      M128A Xmm5;
      M128A Xmm6;
      M128A Xmm7;
      M128A Xmm8;
      M128A Xmm9;
      M128A Xmm10;
      M128A Xmm11;
      M128A Xmm12;
      M128A Xmm13;
      M128A Xmm14;
      M128A Xmm15;
    };
  };
  M128A VectorRegister[26];
  DWORD64 VectorControl;
  DWORD64 DebugControl;
  DWORD64 LastBranchToRip;
  DWORD64 LastBranchFromRip;
  DWORD64 LastExceptionToRip;
  DWORD64 LastExceptionFromRip;
};

/* 63 */
typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;

/* 62 */
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 65 */
typedef struct _CONTEXT *PCONTEXT;

/* 61 */
struct _EXCEPTION_POINTERS
{
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
};

/* 64 */
struct _EXCEPTION_RECORD
{
  DWORD ExceptionCode;
  DWORD ExceptionFlags;
  struct _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  DWORD NumberParameters;
  ULONG_PTR ExceptionInformation[15];
};

/* 66 */
struct C_SCOPE_TABLE
{
  void *__ptr32 Begin;
  void *__ptr32 End;
  void *__ptr32 Handler;
  void *__ptr32 Target;
};

/* 67 */
struct charNode;

