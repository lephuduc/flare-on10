from pwn import xor, p16, u16, p8
import struct
from qiling import Qiling
from qiling.const import QL_VERBOSE
from concurrent.futures import ThreadPoolExecutor

sus = b'\x88j?$\xd3\x08\xa3\x85.\x8a\x19\x13Dsp\x03"8\t\xa4\xd01\x9f)\x98\xfa.\x08\x89lN\xec\xe6!(Ew\x13\xd08\xcffT\xbel\x0c\xe94\xb7)\xac\xc0\xddP|\xc9\xb5\xd5\x84?\x17\tG\xb5\xd9\xd5\x16\x92\x1b\xfby\x89\xa6\x0b1\xd1\xac\xb5\xdf\x98\xdbr\xfd/\xb7\xdf\x1a\xd0\xed\xaf\xe1\xb8\x96~&jE\x90|\xba\x99\x7f,\xf1G\x99\xa1$\xf7l\x91\xb3\xe2\xf2\x01\x08\x16\xfc\x8e\x85\xd8 iciNWq\xa3\xfeX\xa4~=\x93\xf4\x8ft\x95\rX\xb6\x8erX\xcd\x8bq\xeeJ\x15\x82\x1d\xa4T{\xb5YZ\xc29\xd50\x9c\x13`\xf2*#\xb0\xd1\xc5\xf0\x85`(\x18yA\xca\xef8\xdb\xb8\xb0\xdcy\x8e\x0e\x18:`\x8b\x0e\x9el>\x8a\x1e\xb0\xc1w\x15\xd7\'K1\xbd\xda/\xafx`\\`U\xf3%U\xe6\x94\xabU\xaab\x98HW@\x14\xe8cj9\xcaU\xb6\x10\xab*4\\\xcc\xb4\xce\xe8A\x11\xaf\x86T\xa1\x93\xe9r|\x11\x14\xee\xb3*\xbcoc]\xc5\xa9+\xf61\x18t\x16>\\\xce\x1e\x93\x87\x9b3\xba\xd6\xaf\\\xcf$l\x81S2zw\x86\x95(\x98H\x8f;\xaf\xb9Kk\x1b\xe8\xbf\xc4\x93!(f\xcc\t\xd8a\x91\xa9!\xfb`\xac|H2\x80\xec]]]\x84\xef\xb1u\x85\xe9\x02#&\xdc\x88\x1be\xeb\x81>\x89#\xc5\xac\x96\xd3\xf3om\x0f9B\xf4\x83\x82D\x0b.\x04 \x84\xa4J\xf0\xc8i^\x9b\x1f\x9eBh\xc6!\x9al\xe9\xf6a\x9c\x0cg\xf0\x88\xd3\xab\xd2\xa0Qjh/T\xd8(\xa7\x0f\x96\xa33Q\xabl\x0b\xefn\xe4;z\x13P\xf0;\xba\x98*\xfb~\x1de\xf1\xa1v\x01\xaf9>Y\xcaf\x88\x0eC\x82\x19\x86\xee\x8c\xb4\x9foE\xc3\xa5\x84}\xbe^\x8b;\xd8uo\xe0s \xc1\x85\x9fD\x1a@\xa6j\xc1Vb\xaa\xd3N\x06w?6r\xdf\xfe\x1b=\x02\x9bB$\xd7\xd07H\x12\n\xd0\xd3\xea\x0f\xdb\x9b\xc0\xf1I\xc9rS\x07{\x1b\x99\x80\xd8y\xd4%\xf7\xde\xe8\xf6\x1aP\xfe\xe3;Ly\xb6\xbd\xe0l\x97\xba\x06\xc0\x04\xb6O\xa9\xc1\xc4`\x9f@\xc2\x9e\\^c$j\x19\xafo\xfbh\xb5Sl>\xeb\xb29\x13o\xecR;\x1fQ\xfcm,\x950\x9bDE\x81\xcc\t\xbd^\xaf\x04\xd0\xe3\xbe\xfdJ3\xde\x07(\x0ff\xb3K.\x19W\xa8\xcb\xc0\x0ft\xc8E9_\x0b\xd2\xdb\xfb\xd3\xb9\xbd\xc0yU\n2`\x1a\xc6\x00\xa1\xd6yr,@\xfe%\x9fg\xcc\xa3\x1f\xfb\xf8\xe9\xa5\x8e\xf8"2\xdb\xdf\x16u<\x15ka\xfd\xc8\x1eP/\xabR\x05\xad\xfa\xb5=2`\x87#\xfdH{1S\x82\xdf\x00>\xbbW\\\x9e\xa0\x8co\xca.V\x87\x1a\xdbi\x17\xdf\xf6\xa8B\xd5\xc3\xff~(\xc62g\xacsUO\x8c\xb0\'[i\xc8X\xca\xbb]\xa3\xff\xe1\xa0\x11\xf0\xb8\x98=\xfa\x10\xb8\x83!\xfdl\xb5\xfcJ[\xd3\xd1-y\xe4S\x9aeE\xf8\xb6\xbcI\x8e\xd2\x90\x97\xfbK\xda\xf2\xdd\xe13~\xcb\xa4A\x13\xfbb\xe8\xc6\xe4\xce\xda\xca \xef\x01Lw6\xfe\x9e~\xd0\xb4\x1f\xf1+M\xda\xdb\x95\x98\x91\x90\xaeq\x8e\xad\xea\xa0\xd5\x93k\xd0\xd1\x8e\xd0\xe0%\xc7\xaf/[<\x8e\xb7\x94u\x8e\xfb\xe2\xf6\x8fd+\x12\xf2\x12\xb8\x88\x88\x1c\xf0\r\x90\xa0^\xadO\x1c\xc3\x8fh\x91\xf1\xcf\xd1\xad\xc1\xa8\xb3\x18"//w\x17\x0e\xbe\xfe-u\xea\xa1\x1f\x02\x8b\x0f\xcc\xa0\xe5\xe8to\xb5\xd6\xf3\xac\x18\x99\xe2\x89\xce\xe0O\xa8\xb4\xb7\xe0\x13\xfd\x81;\xc4|\xd9\xa8\xad\xd2f\xa2_\x16\x05w\x95\x80\x14s\xcc\x93w\x14\x1a!e \xad\xe6\x86\xfa\xb5w\xf5BT\xc7\xcf5\x9d\xfb\x0c\xaf\xcd\xeb\xa0\x89>{\xd3\x1bA\xd6I~\x1e\xae-\x0e%\x00^\xb3q \xbb\x00h"\xaf\xe0\xb8W\x9b6d$\x1e\xb9\t\xf0\x1d\x91cU\xaa\xa6\xdfY\x89C\xc1x\x7fSZ\xd9\xa2[} \xc5\xb9\xe5\x02v\x03&\x83\xa9\xcf\x95bh\x19\xc8\x11AJsN\xca-G\xb3J\xa9\x14{R\x00Q\x1b\x15)S\x9a?W\x0f\xd6\xe4\xc6\x9b\xbcv\xa4`+\x00t\xe6\x81\xb5o\xba\x08\x1f\xe9\x1bWk\xec\x96\xf2\x15\xd9\r*!ec\xb6\xb6\xf9\xb9\xe7.\x054\xffdV\x85\xc5]-\xb0S\xa1\x8f\x9f\xa9\x99G\xba\x08j\x07\x85n\xe9pzKD)\xb3\xb5.\tu\xdb#&\x19\xc4\xb0\xa6n\xad}\xdf\xa7I\xb8`\xee\x9cf\xb2\xed\x8fq\x8c\xaa\xec\xff\x17\x9ailRdV\xe1\x9e\xb1\xc2\xa5\x026\x19)L\tu@\x13Y\xa0>:\x18\xe4\x9a\x98T?e\x9dB[\xd6\xe4\x8fk\xd6?\xf7\x99\x07\x9c\xd2\xa1\xf50\xe8\xef\xe68-M\xc1]%\xf0\x86 \xddL&\xebp\x84\xc6\xe9\x82c^\xcc\x1e\x02?kh\t\xc9\xef\xba>\x14\x18\x97<\xa1pjk\x845\x7fh\x86\xe2\xa0R\x05S\x9c\xb77\x07P\xaa\x1c\x84\x07>\\\xae\xde\x7f\xecD}\x8e\xb8\xf2\x16W7\xda:\xb0\r\x0cP\xf0\x04\x1f\x1c\xf0\xff\xb3\x00\x02\x1a\xf5\x0c\xae\xb2t\xb5<Xz\x83%\xbd!\t\xdc\xf9\x13\x91\xd1\xf6/\xa9|sG2\x94\x01G\xf5"\x81\xe5\xe5:\xdc\xda\xc274v\xb5\xc8\xa7\xdd\xf3\x9aFaD\xa9\x0e\x03\xd0\x0f>\xc7\xc8\xecA\x1eu\xa4\x99\xcd8\xe2/\x0e\xea;\xa1\xbb\x8021\xb3>\x188\x8bTN\x08\xb9mO\x03\rBo\xbf\x04\n\xf6\x90\x12\xb8,y|\x97$r\xb0yV\xaf\x89\xaf\xbc\x1fw\x9a\xde\x10\x08\x93\xd9\x12\xae\x8b\xb3.?\xcf\xdc\x1fr\x12U$qk.\xe6\xdd\x1aP\x87\xcd\x84\x9f\x18GXz\x17\xda\x08t\xbc\x9a\x9f\xbc\x8c}K\xe9:\xecz\xec\xfa\x1d\x85\xdbfC\tc\xd2\xc3d\xc4G\x18\x1c\xef\x08\xd9\x1527;C\xdd\x16\xba\xc2$CM\xa1\x12Q\xc4e*\x02\x00\x94P\xdd\xe4:\x13\x9e\xf8\xdfqUN1\x10\xd6w\xac\x81\x9b\x19\x11_\xf1V5\x04k\xc7\xa3\xd7;\x18\x11<\t\xa5$Y\xed\xe6\x8f\xf2\xfa\xfb\xf1\x97,\xbf\xba\x9en<\x15\x1epE\xe3\x86\xb1o\xe9\xea\n^\x0e\x86\xb3*>Z\x1c\xe7\x1fw\xfa\x06=N\xb9\xdce)\x0f\x1d\xe7\x99\xd6\x89>\x80%\xc8fRx\xc9L.j\xb3\x10\x9c\xba\x0e\x15\xc6x\xea\xe2\x94S<\xfc\xa5\xf4-\n\x1e\xa7N\xf7\xf2=+\x1d6\x0f&9\x19`y\xc2\x19\x08\xa7#R\xb6\x12\x13\xf7n\xfe\xad\xebf\x1f\xc3\xea\x95E\xbc\xe3\x83\xc8{\xa6\xd17\x7f\xb1(\xff\x8c\x01\xef\xdd2\xc3\xa5Zl\xbe\x85!Xe\x02\x98\xabh\x0f\xa5\xce\xee;\x95/\xdb\xad}\xef*\x84/n[(\xb6!\x15pa\x07)uG\xdd\xec\x10\x15\x9fa0\xa8\xcc\x13\x96\xbda\xeb\x1e\xfe4\x03\xcfc\x03\xaa\x90\\s\xb59\xa2pL\x0b\x9e\x9e\xd5\x14\xde\xaa\xcb\xbc\x86\xcc\xee\xa7,b`\xab\\\xab\x9cn\x84\xf3\xb2\xaf\x1e\x8bd\xca\xf0\xbd\x19\xb9i#\xa0P\xbbZe2Zh@\xb3\xb4*<\xd5\xe9\x9e1\xf7\xb8!\xc0\x19\x0bT\x9b\x99\xa0_\x87~\x99\xf7\x95\xa8}=b\x9a\x887\xf8w-\xe3\x97_\x93\xed\x11\x81\x12h\x16)\x885\x0e\xd6\x1f\xe6\xc7\xa1\xdf\xde\x96\x99\xbaXx\xa5\x84\xf5Wcr"\x1b\xff\xc3\x83\x9b\x96F\xc2\x1a\xeb\n\xb3\xcdT0.S\xe4H\xd9\x8f(1\xbcm\xef\xf2\xebX\xea\xff\xc64a\xed(\xfes<|\xee\xd9\x14J]\xe3\xb7d\xe8\x14]\x10B\xe0\x13> \xb6\xe2\xeeE\xea\xab\xaa\xa3\x15Ol\xdb\xd0O\xcb\xfaB\xf4B\xc7\xb5\xbbj\xef\x1d;Oe\x05!\xcdA\x9ey\x1e\xd8\xc7M\x85\x86jGK\xe4Pb\x81=\xf2\xa1b\xcfF&\x8d[\xa0\x83\x88\xfc\xa3\xb6\xc7\xc1\xc3$\x15\x7f\x92t\xcbi\x0b\x8a\x84G\x85\xb2\x92V\x00\xbf[\t\x9dH\x19\xadt\xb1b\x14\x00\x0e\x82#*\x8dBX\xea\xf5U\x0c>\xf4\xad\x1dap?#\x92\xf0r3A~\x93\x8d\xf1\xec_\xd6\xdb;"lY7\xde|`t\xee\xcb\xa7\xf2\x85@n2w\xce\x84\x80\x07\xa6\x9eP\xf8\x19U\xd8\xef\xe85\x97\xd9a\xaa\xa7i\xa9\xc2\x06\x0c\xc5\xfc\xab\x04Z\xdc\xca\x0b\x80.zD\x9e\x844E\xc3\x05g\xd5\xfd\xc9\x9e\x1e\x0e\xd3\xdbs\xdb\xcd\x88U\x10y\xda_g@Cg\xe3e4\xc4\xc5\xd88>q\x9e\xf8(= \xffm\xf1\xe7!>\x15J=\xb0\x8f+\x9f\xe3\xe6\xf7\xad\x83\xdbhZ=\xe9\xf7@\x81\x94\x1c&L\xf64)i\x94\xf7 \x15A\xf7\xd4\x02v.k\xf4\xbch\x00\xa2\xd4q$\x08\xd4j\xf4 3\xb7\xd4\xb7C\xafa\x00P.\xf69\x1eFE$\x97tO!\x14@\x88\x8b\xbf\x1d\xfc\x95M\xaf\x91\xb5\x96\xd3\xdd\xf4pE/\xa0f\xec\t\xbc\xbf\x85\x97\xbd\x03\xd0m\xac\x7f\x04\x85\xcb1\xb3\'\xeb\x96A9\xfdU\xe6G%\xda\x9a\n\xca\xab%xP(\xf4)\x04S\xda\x86,\n\xfbm\xb6\xe9b\x14\xdch\x00iH\xd7\xa4\xc0\x0eh\xee\x8d\xa1\'\xa2\xfe?O\x8c\xad\x87\xe8\x06\xe0\x8c\xb5\xb6\xd6\xf4z|\x1e\xce\xaa\xec_7\xd3\x99\xa3x\xceB*k@5\x9e\xfe \xb9\x85\xf3\xd9\xab\xd79\xee\x8bN\x12;\xf7\xfa\xc9\x1dV\x18mK1f\xa3&\xb2\x97\xe3\xeat\xfan:2C[\xdd\xf7\xe7Ah\xfb x\xcaN\xf5\n\xfb\x97\xb3\xfe\xd8\xacV@E\'\x95H\xba::SU\x87\x8d\x83 \xb7\xa9k\xfeK\x95\x96\xd0\xbcg\xa8UX\x9a\x15\xa1c)\xa9\xcc3\xdb\xe1\x99VJ*\xa6\xf9%1?\x1c~\xf4^|1)\x90\x02\xe8\xf8\xfdp/\'\x04\\\x15\xbb\x80\xe3,(\x05H\x15\xc1\x95"m\xc6\xe4?\x13\xc1H\xdc\x86\x0f\xc7\xee\xc9\xf9\x07\x0f\x1f\x04A\xa4yG@\x17n\x88]\xebQ_2\xd1\xc0\x9b\xd5\x8f\xc1\xbc\xf2d5\x11A4x{%`\x9c*`\xa3\xe8\xf8\xdf\x1blc\x1f\xc2\xb4\x12\x0e\x9e2\xe1\x02\xd1Of\xaf\x15\x81\xd1\xca\xe0\x95#k\xe1\x92>3b\x0b$;"\xb9\xbe\xee\x0e\xa2\xb2\x85\x99\r\xba\xe6\x8c\x0cr\xde(\xf7\xa2-Ex\x12\xd0\xfd\x94\xb7\x95b\x08}d\xf0\xf5\xcc\xe7o\xa3IT\xfaH}\x87\'\xfd\x9d\xc3\x1e\x8d>\xf3AcG\nt\xff.\x99\xabno:7\xfd\xf8\xf4`\xdc\x12\xa8\xf8\xdd\xeb\xa1L\xe1\x1b\x99\rkn\xdb\x10U{\xc67,gm;\xd4e\'\x04\xe8\xd0\xdc\xc7\r)\xf1\xa3\xff\x00\xcc\x92\x0f9\xb5\x0b\xed\x0fi\xfb\x9f{f\x9c}\xdb\xce\x0b\xcf\x91\xa0\xa3^\x15\xd9\x88/\x13\xbb$\xad[Q\xbfy\x94{\xeb\xd6;v\xb3.97yY\x11\xcc\x97\xe2&\x80-1.\xf4\xa7\xadBh;+j\xc6\xccLu\x12\x1c\xf1.x7B\x12j\xe7Q\x92\xb7\xe6\xbb\xa1\x06Pc\xfbK\x18\x10k\x1a\xfa\xed\xca\x11\xd8\xbd%=\xc9\xc3\xe1\xe2Y\x16BD\x86\x13\x12\nn\xec\x0c\xd9*\xea\xab\xd5Ng\xafd_\xa8\x86\xda\x88\xe9\xbf\xbe\xfe\xc3\xe4dW\x80\xbc\x9d\x86\xc0\xf7\xf0\xf8{x`M`\x03`F\x83\xfd\xd1\xb0\x1f8\xf6\x04\xaeEw\xcc\xfc6\xd73kB\x83q\xab\x1e\xf0\x87A\x80\xb0_^\x00<\xbeW\xa0w$\xae\xe8\xbd\x99BFUa.X\xbf\x8f\xf4XN\xa2\xfd\xdd\xf28\xeft\xf4\xc2\xbd\x89\x87\xc3\xf9fSt\x8e\xb3\xc8U\xf2u\xb4\xb9\xd9\xfcFa&\xebz\x84\xdf\x1d\x8by\x0ej\x84\xe2\x95_\x91\x8eYnFpW\xb4 \x91U\xd5\x8cL\xde\x02\xc9\xe1\xac\x0b\xb9\xd0\x05\x82\xbbHb\xa8\x11\x9e\xa9tu\xb6\x19\x7f\xb7\t\xdc\xa9\xe0\xa1\t-f3F2\xc4\x02\x1fZ\xe8\x8c\xbe\xf0\t%\xa0\x99J\x10\xfen\x1d\x1d=\xb9\x1a\xdf\xa4\xa5\x0b\x0f\xf2\x86\xa1i\xf1h(\x83\xda\xb7\xdc\xfe\x069W\x9b\xce\xe2\xa1R\x7f\xcdO\x01^\x11P\xfa\x83\x06\xa7\xc4\xb5\x02\xa0\'\xd0\xe6\r\'\x8c\xf8\x9aA\x86?w\x06L`\xc3\xb5\x06\xa8a(z\x17\xf0\xe0\x86\xf5\xc0\xaaX`\x00b}\xdc0\xd7\x9e\xe6\x11c\xea8#\x94\xdd\xc2S4\x16\xc2\xc2V\xee\xcb\xbb\xde\xb6\xbc\x90\xa1}\xfc\xebv\x1dY\xce\t\xe4\x05o\x88\x01|K=\nr9$|\x92|_r\xe3\x86\xb9\x9dMr\xb4[\xc1\x1a\xfc\xb8\x9e\xd3xUT\xed\xb5\xa5\xfc\x08\xd3|=\xd8\xc4\x0f\xadM^\xefP\x1e\xf8\xe6a\xb1\xd9\x14\x85\xa2<\x13Ql\xe7\xc7\xd5o\xc4N\xe1V\xce\xbf*67\xc8\xc6\xdd42\x9a\xd7\x12\x82c\x92\x8e\xfa\x0eg\xe0\x00`@7\xce9:\xcf\xf5\xfa\xd37w\xc2\xab\x1b-\xc5Z\x9eg\xb0\\B7\xa3O@\'\x82\xd3\xbe\x9b\xbc\x99\x9d\x8e\x11\xd5\x15s\x0f\xbf~\x1c-\xd6{\xc4\x00\xc7k\x1b\x8c\xb7E\x90\xa1!\xbe\xb1n\xb2\xb4n6j/\xabHWyn\x94\xbc\xd2v\xa3\xc6\xc8\xc2Ie\xee\xf8\x0fS}\xde\x8dF\x1d\ns\xd5\xc6M\xd0L\xdb\xbb9)PF\xba\xa9\xe8&\x95\xac\x04\xe3^\xbe\xf0\xd5\xfa\xa1\x9aQ-j\xe2\x8c\xefc"\xee\x86\x9a\xb8\xc2\x89\xc0\xf6.$C\xaa\x03\x1e\xa5\xa4\xd0\xf2\x9c\xbaa\xc0\x83Mj\xe9\x9bP\x15\xe5\x8f\xd6[d\xba\xf9\xa2&(\xe1::\xa7\x86\x95\xa9K\xe9bU\xef\xd3\xef/\xc7\xda\xf7R\xf7io\x04?Y\n\xfaw\x15\xa9\xe4\x80\x01\x86\xb0\x87\xad\xe6\t\x9b\x93\xe5>;Z\xfd\x90\xe9\x97\xd74\x9e\xd9\xb7\xf0,Q\x8b+\x02:\xac\xd5\x96}\xa6}\x01\xd6>\xcf\xd1(-}|\xcf%\x9f\x1f\x9b\xb8\xf2\xadr\xb4\xd6ZL\xf5\x88Zq\xac)\xe0\xe6\xa5\x19\xe0\xfd\xac\xb0G\x9b\xfa\x93\xed\x8d\xc4\xd3\xe8\xccW;()f\xd5\xf8(.\x13y\x91\x01_xU`u\xedD\x0e\x96\xf7\x8c^\xd3\xe3\xd4m\x05\x15\xbam\xf4\x88%a\xa1\x03\xbd\xf0d\x05\x15\x9e\xeb\xc3\xa2W\x90<\xec\x1a\'\x97*\x07:\xa9\x9bm?\x1b\xf5!c\x1e\xfbf\x9c\xf5\x19\xf3\xdc&(\xd93u\xf5\xfdU\xb1\x824V\x03\xbb<\xba\x8a\x11wQ(\xf8\xd9\n\xc2gQ\xcc\xab_\x92\xad\xccQ\x17\xe8M\x8e\xdc08bX\x9d7\x91\xf9 \x93\xc2\x90z\xea\xce{>\xfbd\xce!Q2\xbeOw~\xe3\xb6\xa8F=)\xc3iS\xdeH\x80\xe6\x13d\x10\x08\xae\xa2$\xb2m\xdd\xfd-\x85if!\x07\t\nF\x9a\xb3\xdd\xc0Ed\xcf\xdelX\xae\xc8 \x1c\xdd\xf7\xbe[@\x8dX\x1b\x7f\x01\xd2\xcc\xbb\xe3\xb4k~j\xa2\xddE\xffY:D\n5>\xd5\xcd\xb4\xbc\xa8\xce\xear\xbb\x84d\xfa\xae\x12f\x8dGo<\xbfc\xe4\x9b\xd2\x9e]/T\x1bw\xc2\xaepcN\xf6\x8d\r\x0etW\x13[\xe7q\x16r\xf8]}S\xaf\x08\xcb@@\xcc\xe2\xb4NjF\xd24\x84\xaf\x15\x01(\x04\xb0\xe1\x1d:\x98\x95\xb4\x9f\xb8\x06H\xa0n\xce\x82;?o\x82\xab 5K\x1d\x1a\x01\xf8\'r\'\xb1`\x15a\xdc?\x93\xe7+y:\xbb\xbd%E4\xe19\x88\xa0Ky\xceQ\xb7\xc92/\xc9\xba\x1f\xa0~\xc8\x1c\xe0\xf6\xd1\xc7\xbc\xc3\x11\x01\xcf\xc7\xaa\xe8\xa1I\x87\x90\x1a\x9a\xbdO\xd4\xcb\xde\xda\xd08\xda\n\xd5*\xc39\x03g6\x91\xc6|1\xf9\x8dO+\xb1\xe0\xb7Y\x9e\xf7:\xbb\xf5C\xff\x19\xd5\xf2\x9cE\xd9\',"\x97\xbf*\xfc\xe6\x15q\xfc\x91\x0f%\x15\x94\x9ba\x93\xe5\xfa\xeb\x9c\xb6\xceYd\xa8\xc2\xd1\xa8\xba\x12^\x07\xc1\xb6\x0cj\x05\xe3eP\xd2\x10B\xa4\x03\xcb\x0en\xec\xe0;\xdb\x98\x16\xbe\xa0\x98Ld\xe9x22\x95\x1f\x9f\xdf\x92\xd3\xe0+4\xa0\xd3\x1e\xf2q\x89At\n\x1b\x8c4\xa3K q\xbe\xc5\xd82v\xc3\x8d\x9f5\xdf./\x99\x9bGo\x0b\xe6\x1d\xf1\xe3\x0fT\xdaL\xe5\x91\xd8\xda\x1e\xcfyb\xceo~>\xcdf\xb1\x18\x16\x05\x1d,\xfd\xc5\xd2\x8f\x84\x99"\xfb\xf6W\xf3#\xf5#v2\xa615\xa8\x93\x02\xcd\xccVb\x81\xf0\xac\xb5\xebuZ\x976\x16n\xccs\xd2\x88\x92b\x96\xde\xd0I\xb9\x81\x1b\x90PL\x14V\xc6q\xbd\xc7\xc6\xe6\n\x14z2\x06\xd0\xe1E\x9a{\xf2\xc3\xfdS\xaa\xc9\x00\x0f\xa8b\xe2\xbf%\xbb\xf6\xd2\xbd5\x05i\x12q"\x02\x04\xb2|\xcf\xcb\xb6+\x9cv\xcd\xc0>\x11S\xd3\xe3@\x16`\xbd\xab8\xf0\xadG%\x9c 8\xbav\xceF\xf7\xc5\xa1\xafw``u N\xfe\xcb\x85\xd8\x8d\xe8\x8a\xb0\xf9\xaaz~\xaa\xf9L\\\xc2H\x19\x8c\x8a\xfb\x02\xe4j\xc3\x01\xf9\xe1\xeb\xd6i\xf8\xd4\x90\xa0\xde\\\xa6-%\t?\x9f\xe6\x08\xc22aN\xb7[\xe2w\xce\xe3\xdf\x8fW\xe6r\xc3:'

def adc(a, b):
    global carry
    res = a + b
    if carry:
        res += 1
        carry = 0
    return res&0xffff
def Create_buffer(inp):
    buf = b''
    for i in range(0,72,4):
        buf += struct.pack("<4B",
                          inp[(i+3)%16]^sus[i+0],
                          inp[(i+2)%16]^sus[i+1],
                          inp[(i+1)%16]^sus[i+2],
                          inp[i%16]^sus[i+3]
                          )
        # buf += xor(bytes([bl,bh,dl,dh]),sus[i:i+4])
    buf += sus[72:]
    buf_sp = b'\x00'*8

    for i in range(0,0x1048,8):
        buf_sp = modbuf8(buf_sp,buf)
        buf = buf[:i] + buf_sp + buf[i+8:] 
        # newbuf += buf_sp
    return buf
def modbuf8(inp_buf,mem):
    cx,dx,di,bx = struct.unpack('<4H',inp_buf)
    for i in range(0,9*8,8):
        un = struct.unpack('<4H',mem[i:i+8])
        cx^= un[0]
        dx^= un[1]
        di^= un[2]
        bx^= un[3]
        if i == 64:
            break     
        op1,op2 = Get_num_1(cx,dx,mem)
        di^=op1
        bx^=op2
        op1,op2 = Get_num_1(di,bx,mem)
        cx^=op1
        dx^=op2
    return struct.pack("<4H",di,bx,cx,dx)

def Get_num_1(op1,op2,mem):
    global carry
    carry = 0
    t = op2>>8
    idx = t*4 + 72
    ax,dx = struct.unpack('<2H',mem[idx:idx+4])
    t = op2&0xff
    idx = t*4 + 0x400 + 72
    ax = (ax + struct.unpack("<H",mem[idx:idx+2])[0])
    if ax > 0xffff: carry = 1
    ax&=0xffff
    dx = adc(dx , struct.unpack("<H",mem[idx+2:idx+4])[0])
    t = op1>>8
    idx = t*4 + 0x800 + 72
    ax = (ax ^ struct.unpack("<H",mem[idx:idx+2])[0])
    dx = (dx ^ struct.unpack("<H",mem[idx+2:idx+4])[0])
    t = op1&0xff
    idx = t*4 + 0xc00 + 72
    ax = (ax + struct.unpack("<H",mem[idx:idx+2])[0])
    if ax > 0xffff:
        carry = 1 
    ax&=0xffff
    dx = adc(dx , struct.unpack("<H",mem[idx+2:idx+4])[0])
    return ax,dx

def hash_(inp):

    inp += xor(inp,0x55)
    buf_2a78 = Create_buffer(inp)
    hashed = modbuf8(b'tseTrtS ',buf_2a78)
    hashed = bytes([hashed[3],hashed[2],hashed[1],hashed[0],hashed[7],hashed[6],hashed[5],hashed[4]])
    return hashed
inps = []
for i in range(255,-1,-1):
    for j in range(256):
        inp = b'a\xd2\xe6\xe1Ju' + p8(i) + p8(j)
        inps.append(inp)

def check(inp):
    if hash_(inp)==b'.!W\x82>\xa9ln':
        print(inp)
        exit(0)
# with ThreadPoolExecutor(max_workers=20) as pool:
#     pool.map(check,inps)


from queue import Queue
from threading import Thread


class Worker(Thread):
    """Thread executing tasks from a given tasks queue"""

    def __init__(self, tasks):
        Thread.__init__(self)
        self.tasks = tasks
        self.daemon = True
        self.start()

    def run(self):
        while True:
            func, args, kargs = self.tasks.get()
            try:
                func(*args, **kargs)
            except Exception as e:
                print(str(e))
            finally:
                self.tasks.task_done()


class ThreadPool:
    """Pool of threads consuming tasks from a queue"""

    def __init__(self, num_threads):
        self.tasks = Queue(num_threads)
        for _ in range(num_threads):
            Worker(self.tasks)

    def add_task(self, func, *args, **kargs):
        """Add a task to the queue"""
        self.tasks.put((func, args, kargs))

    def wait_completion(self):
        """Wait for completion of all the tasks in the queue"""
        self.tasks.join()

if __name__ == '__main__':

    inps = inps[::-1]
    pool = ThreadPool(20)
    for i, d in enumerate(inps):
        pool.add_task(check, d)
        # print(i)
    pool.wait_completion()